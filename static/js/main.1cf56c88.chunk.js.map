{"version":3,"sources":["components/EachSelectedNumber.js","components/TargetSum.js","components/EachNumber.js","components/EachOptionNumbers.js","components/NumberOptions.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["SelectedNumberSource","beginDrag","props","console","log","number","endDrag","monitor","component","didDrop","draggedNumber","handleSelectedRemove","EachSelectedNumber","_this$props","this","opacity","isDragging","connectDragSource","react_default","a","createElement","className","style","Component","_","flow","DragSource","connect","dragSource","connectDragPreview","dragPreview","TargetSum","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","selectedNumbers","map","id","components_EachSelectedNumber","key","connectDropTarget","hovered","item","width","target","concat","currentTargetIsEqual","currentSum","length","DropTarget","dropTarget","isOver","getItem","numberSource","handleDrop","EachNumber","EachOptionNumbers","optionNumbers","components_EachNumber","NumberOptions","components_EachOptionNumbers","Game","calculateCurrentSum","reduce","b","setState","index","randomNumbers","indexOf","toConsumableArray","splice","prevState","Array","from","Math","floor","random","slice","acc","curr","shuffleRandomNumbers","shuffle","onClick","onResetclick","components_TargetSum","components_NumberOptions","App","gameId","components_Game","DragDropContext","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cf56c88.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { DragSource } from 'react-dnd';\r\nimport _ from 'lodash';\r\n\r\nconst SelectedNumberSource = {\r\n  beginDrag(props) {\r\n    console.log('Dragging Selected');\r\n    const draggedNumber = { number: props.number };\r\n    return draggedNumber;\r\n  },\r\n  endDrag(props, monitor, component) {\r\n    if (!monitor.didDrop()) {\r\n      return;\r\n    }\r\n    const draggedNumber = props.number;\r\n    return props.handleSelectedRemove(draggedNumber);\r\n  }\r\n};\r\n\r\nconst collect = (connect, monitor) => {\r\n  return {\r\n    connectDragSource: connect.dragSource(),\r\n    connectDragPreview: connect.dragPreview(),\r\n    isDragging: monitor.isDragging()\r\n  };\r\n};\r\n\r\nclass EachSelectedNumber extends Component {\r\n  render() {\r\n    const { isDragging, connectDragSource } = this.props;\r\n    const opacity = isDragging ? 0 : 1;\r\n    return connectDragSource(\r\n      <div className='selectedNumber' style={{ opacity }}>\r\n        {this.props.number}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default _.flow([\r\n  DragSource('selectedNumber', SelectedNumberSource, collect)\r\n])(EachSelectedNumber);\r\n","import React, { Component } from 'react';\r\nimport EachSelectedNumber from './EachSelectedNumber';\r\nimport { DropTarget } from 'react-dnd';\r\nimport _ from 'lodash';\r\n\r\nconst collect = (connect, monitor) => {\r\n  return {\r\n    connectDropTarget: connect.dropTarget(),\r\n    hovered: monitor.isOver(),\r\n    item: monitor.getItem()\r\n  };\r\n};\r\n\r\nclass TargetSum extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const selectedNumbers = this.props.selectedNumbers.map((number, id) => {\r\n      return (\r\n        <EachSelectedNumber\r\n          handleSelectedRemove={this.props.handleSelectedRemove}\r\n          key={id}\r\n          number={number}\r\n        />\r\n      );\r\n    });\r\n\r\n    const { connectDropTarget, hovered, item } = this.props;\r\n    return connectDropTarget(\r\n      <div className='card container targetSum' style={{ width: '26rem' }}>\r\n        <ul className='list-group list-group-flush'>\r\n          <li className='list-group-item target'>\r\n            Target Sum:\r\n            <br />\r\n            <span className='number'>{this.props.target}</span>\r\n          </li>\r\n          <li className='list-group-item current'>\r\n            Current Sum:\r\n            <br />\r\n            <span\r\n              className={`number ${\r\n                this.props.currentTargetIsEqual === 'MORE'\r\n                  ? 'red'\r\n                  : this.props.currentTargetIsEqual === 'LESS'\r\n                  ? 'grey'\r\n                  : ''\r\n              }`}\r\n            >\r\n              {this.props.currentSum}\r\n            </span>\r\n          </li>\r\n          <li className='list-group-item selected'>\r\n            Selected:\r\n            <br />\r\n            {this.props.selectedNumbers.length ? (\r\n              <div className=''>\r\n                <div className='listSelected'>{selectedNumbers}</div>\r\n              </div>\r\n            ) : (\r\n              <div className='grey'>Drag the numbers here</div>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default _.flow([DropTarget('optionNumber', {}, collect)])(TargetSum);\r\n","import React, { Component } from 'react';\r\nimport { DragSource } from 'react-dnd';\r\nimport _ from 'lodash';\r\n\r\nconst numberSource = {\r\n  beginDrag(props) {\r\n    console.log('Dragging');\r\n    const draggedNumber = { number: props.number };\r\n    return draggedNumber;\r\n  },\r\n  endDrag(props, monitor, component) {\r\n    if (!monitor.didDrop()) {\r\n      return;\r\n    }\r\n    const draggedNumber = props.number;\r\n    return props.handleDrop(draggedNumber);\r\n  }\r\n};\r\n\r\nconst collect = (connect, monitor) => {\r\n  return {\r\n    connectDragSource: connect.dragSource(),\r\n    connectDragPreview: connect.dragPreview(),\r\n    isDragging: monitor.isDragging()\r\n  };\r\n};\r\n\r\nclass EachNumber extends Component {\r\n  render() {\r\n    const { isDragging, connectDragSource } = this.props;\r\n    const opacity = isDragging ? 0 : 1;\r\n    return connectDragSource(\r\n      <div className='optionsNumber' style={{ opacity }}>\r\n        {this.props.number}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default _.flow([DragSource('optionNumber', numberSource, collect)])(\r\n  EachNumber\r\n);\r\n","import React, { Component } from 'react';\r\nimport EachNumber from './EachNumber';\r\n\r\nclass EachOptionNumbers extends Component {\r\n  render() {\r\n    const optionNumbers = this.props.optionNumbers.map((number, id) => {\r\n      return (\r\n        <EachNumber\r\n          handleDrop={this.props.handleDrop}\r\n          key={id}\r\n          number={number}\r\n        />\r\n      );\r\n    });\r\n    return <div className='optionsDiv'>{optionNumbers}</div>;\r\n  }\r\n}\r\n\r\nexport default EachOptionNumbers;\r\n","import React, { Component } from 'react';\r\nimport { DropTarget } from 'react-dnd';\r\nimport EachOptionNumbers from './EachOptionNumbers';\r\n\r\nconst collectTarget = (connect, monitor) => {\r\n  return {\r\n    connectDropTarget: connect.dropTarget(),\r\n    hovered: monitor.isOver(),\r\n    item: monitor.getItem()\r\n  };\r\n};\r\n\r\nclass NumberOptions extends Component {\r\n  render() {\r\n    const { connectDropTarget, hovered, item } = this.props;\r\n    return connectDropTarget(\r\n      <div>\r\n        <div\r\n          className='card container numberOptions'\r\n          style={{ width: '26rem' }}\r\n        >\r\n          <ul className='list-group list-group-flush'>\r\n            <li className='list-group-item options'>\r\n              Your Options:\r\n              <br />\r\n              <div className=''>\r\n                <EachOptionNumbers\r\n                  handleDrop={this.props.handleDrop}\r\n                  optionNumbers={this.props.optionNumbers}\r\n                />\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DropTarget('selectedNumber', {}, collectTarget)(NumberOptions);\r\n","import React, { Component } from 'react';\r\nimport TargetSum from './TargetSum';\r\nimport NumberOptions from './NumberOptions';\r\nimport shuffle from 'lodash.shuffle';\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      randomNumbers: [],\r\n      selectedNumbers: [],\r\n      currentSum: 0,\r\n      currentTargetIsEqual: ''\r\n    };\r\n  }\r\n\r\n  calculateCurrentSum = () => {\r\n    const currentSum = this.state.selectedNumbers.reduce((a, b) => a + b, 0);\r\n    const currentTargetIsEqual =\r\n      currentSum === this.target\r\n        ? 'EQUAL'\r\n        : currentSum > this.target\r\n        ? 'MORE'\r\n        : 'LESS';\r\n    this.setState({\r\n      currentSum,\r\n      currentTargetIsEqual\r\n    });\r\n  };\r\n\r\n  handleDrop = number => {\r\n    const index = this.state.randomNumbers.indexOf(number);\r\n    const randomNumbers = [...this.state.randomNumbers];\r\n    randomNumbers.splice(index, 1);\r\n    this.setState(\r\n      prevState => ({\r\n        randomNumbers: randomNumbers,\r\n        selectedNumbers: [...prevState.selectedNumbers, number]\r\n      }),\r\n      () => {\r\n        this.calculateCurrentSum();\r\n      }\r\n    );\r\n  };\r\n\r\n  handleSelectedRemove = number => {\r\n    const index = this.state.selectedNumbers.indexOf(number);\r\n    const selectedNumbers = [...this.state.selectedNumbers];\r\n    selectedNumbers.splice(index, 1);\r\n    this.setState(\r\n      prevState => ({\r\n        selectedNumbers: selectedNumbers,\r\n        randomNumbers: [...prevState.randomNumbers, number]\r\n      }),\r\n      () => {\r\n        this.calculateCurrentSum();\r\n      }\r\n    );\r\n  };\r\n\r\n  randomNumbers = Array.from({ length: 7 }).map(\r\n    () => 1 + Math.floor(10 * Math.random())\r\n  );\r\n\r\n  target = this.randomNumbers\r\n    .slice(0, 7 - 2)\r\n    .reduce((acc, curr) => acc + curr, 0);\r\n\r\n  shuffleRandomNumbers = shuffle(this.randomNumbers);\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      randomNumbers: this.shuffleRandomNumbers\r\n    });\r\n    this.calculateCurrentSum();\r\n  }\r\n\r\n  render() {\r\n    console.log(this.target, this.randomNumbers);\r\n    return (\r\n      <div className='game'>\r\n        <button\r\n          style={{ width: '26rem' }}\r\n          className='btn btn-primary btn-lg reset'\r\n          onClick={this.props.onResetclick}\r\n        >\r\n          Reset\r\n        </button>\r\n        <TargetSum\r\n          currentTargetIsEqual={this.state.currentTargetIsEqual}\r\n          currentSum={this.state.currentSum}\r\n          selectedNumbers={this.state.selectedNumbers}\r\n          target={this.target}\r\n          handleSelectedRemove={this.handleSelectedRemove}\r\n        />\r\n        {this.state.currentTargetIsEqual === 'EQUAL' ? (\r\n          <div className='winMessage'>\r\n            <h3>You Won!</h3>\r\n          </div>\r\n        ) : (\r\n          <NumberOptions\r\n            handleDrop={this.handleDrop}\r\n            optionNumbers={this.state.randomNumbers}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\nimport Game from './components/Game';\nimport './App.css';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { DragDropContext } from 'react-dnd';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: 0\n    };\n  }\n\n  onResetclick = () => {\n    this.setState({ gameId: this.state.gameId + 1 });\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='container'>\n          <Game key={this.state.gameId} onResetclick={this.onResetclick} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DragDropContext(HTML5Backend)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}